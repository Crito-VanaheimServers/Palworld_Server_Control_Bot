"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var tableReducer = function tableReducer(_ref) {
  var key = _ref.key,
      _ref$data = _ref.data,
      data = _ref$data === void 0 ? [] : _ref$data,
      _ref$pageSize = _ref.pageSize,
      pageSize = _ref$pageSize === void 0 ? 50 : _ref$pageSize,
      _ref$pageSizeList = _ref.pageSizeList,
      pageSizeList = _ref$pageSizeList === void 0 ? [50, 100, 250] : _ref$pageSizeList,
      _ref$pageNo = _ref.pageNo,
      pageNo = _ref$pageNo === void 0 ? 1 : _ref$pageNo,
      _ref$sortColumn = _ref.sortColumn,
      sortColumn = _ref$sortColumn === void 0 ? null : _ref$sortColumn,
      _ref$columnFilters = _ref.columnFilters,
      columnFilters = _ref$columnFilters === void 0 ? [] : _ref$columnFilters,
      _ref$tableCount = _ref.tableCount,
      tableCount = _ref$tableCount === void 0 ? 0 : _ref$tableCount;
  var SET_DATA = "".concat(key, "/SET_DATA");
  var CLEAR_DATA = "".concat(key, "/CLEAR_DATA");
  var SET_PAGE_SIZE = "".concat(key, "/SET_PAGE_SIZE");
  var SET_PAGE_NO = "".concat(key, "/SET_PAGE_NO");
  var SET_SORT_COLUMN = "".concat(key, "/SET_SORT_COLUMN");
  var CLEAR_SORT_COLUMN = "".concat(key, "/CLEAR_SORT_COLUMN");
  var SET_COLUMN_FILTERS = "".concat(key, "/SET_COLUMN_FILTERS");
  var CLEAR_COLUMN_FILTERS = "".concat(key, "/CLEAR_COLUMN_FILTERS");
  var SET_TABLE_COUNT = "".concat(key, "/SET_TABLE_COUNT");
  var RESET_TABLE_SETTINGS = "".concat(key, "/RESET_TABLE_SETTINGS");
  var tablesOptionsInitialState = {
    data: data,
    pageSize: pageSize,
    pageSizeList: pageSizeList,
    pageNo: pageNo,
    sortColumn: sortColumn,
    columnFilters: columnFilters,
    tableCount: tableCount
  };

  var tableOptionsReducer = function tableOptionsReducer() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : tablesOptionsInitialState;
    var action = arguments.length > 1 ? arguments[1] : undefined;

    switch (action.type) {
      case SET_DATA:
        return _objectSpread({}, state, {
          data: action.data
        });

      case CLEAR_DATA:
        return _objectSpread({}, state, {
          data: tablesOptionsInitialState.data
        });

      case SET_PAGE_SIZE:
        return _objectSpread({}, state, {
          pageSize: action.pageSize
        });

      case SET_PAGE_NO:
        return _objectSpread({}, state, {
          pageNo: action.pageNo
        });

      case SET_SORT_COLUMN:
        return _objectSpread({}, state, {
          sortColumn: sortColumn
        });

      case CLEAR_SORT_COLUMN:
        return _objectSpread({}, state, {
          sortColumn: tablesOptionsInitialState.sortColumn
        });

      case SET_COLUMN_FILTERS:
        return _objectSpread({}, state, {
          columnFilters: action.columnFilters
        });

      case CLEAR_COLUMN_FILTERS:
        return _objectSpread({}, state, {
          columnFilters: tablesOptionsInitialState.columnFilters
        });

      case SET_TABLE_COUNT:
        return _objectSpread({}, state, {
          tableCount: action.tableCount
        });

      case RESET_TABLE_SETTINGS:
        return _objectSpread({}, state, {
          pageSize: tablesOptionsInitialState.pageSize,
          pageNo: tablesOptionsInitialState.pageNo,
          sortColumn: tablesOptionsInitialState.sortColumn,
          columnFilters: tablesOptionsInitialState.columnFilters,
          tableCount: tablesOptionsInitialState.tableCount
        });

      default:
        return state;
    }
  };

  var setData = function setData(_ref2) {
    var data = _ref2.data;
    return {
      type: SET_DATA,
      data: data
    };
  };

  var clearData = function clearData() {
    return {
      type: CLEAR_DATA
    };
  };

  var setPageSize = function setPageSize(_ref3) {
    var pageSize = _ref3.pageSize;
    return {
      type: SET_PAGE_SIZE,
      pageSize: pageSize
    };
  };

  var setPageNo = function setPageNo(_ref4) {
    var pageNo = _ref4.pageNo;
    return {
      type: SET_PAGE_NO,
      pageNo: pageNo
    };
  };

  var setSortColumn = function setSortColumn(_ref5) {
    var col = _ref5.col,
        dir = _ref5.dir;
    return {
      type: SET_SORT_COLUMN,
      SET_SORT_COLUMN: "".concat(col, " ").concat(dir)
    };
  };

  var setTableCount = function setTableCount(_ref6) {
    var tableCount = _ref6.tableCount;
    return {
      type: SET_TABLE_COUNT,
      tableCount: tableCount
    };
  };

  var setColumnFilters = function setColumnFilters(_ref7) {
    var date = _ref7.date;
    return {
      type: SET_COLUMN_FILTERS,
      date: date
    };
  };

  var clearColumnFilters = function clearColumnFilters() {
    return {
      type: CLEAR_COLUMN_FILTERS
    };
  };

  var resetTableSettings = function resetTableSettings() {
    return {
      type: RESET_TABLE_SETTINGS
    };
  };

  return {
    tableOptionsReducer: tableOptionsReducer,
    setData: setData,
    clearData: clearData,
    setPageSize: setPageSize,
    setPageNo: setPageNo,
    setSortColumn: setSortColumn,
    setColumnFilters: setColumnFilters,
    clearColumnFilters: clearColumnFilters,
    setTableCount: setTableCount,
    resetTableSettings: resetTableSettings
  };
};

var _default = tableReducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,