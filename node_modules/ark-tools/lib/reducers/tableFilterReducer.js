"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var tableReducer = function tableReducer(_ref) {
  var key = _ref.key,
      _ref$data = _ref.data,
      data = _ref$data === void 0 ? [] : _ref$data,
      _ref$pageSize = _ref.pageSize,
      pageSize = _ref$pageSize === void 0 ? 50 : _ref$pageSize,
      _ref$pageSizeList = _ref.pageSizeList,
      pageSizeList = _ref$pageSizeList === void 0 ? [50, 100, 250] : _ref$pageSizeList,
      _ref$pageNo = _ref.pageNo,
      pageNo = _ref$pageNo === void 0 ? 1 : _ref$pageNo,
      _ref$sortColumn = _ref.sortColumn,
      sortColumn = _ref$sortColumn === void 0 ? null : _ref$sortColumn,
      _ref$columnFilters = _ref.columnFilters,
      columnFilters = _ref$columnFilters === void 0 ? [] : _ref$columnFilters,
      _ref$tableCount = _ref.tableCount,
      tableCount = _ref$tableCount === void 0 ? 0 : _ref$tableCount,
      _ref$filterState = _ref.filterState,
      filterState = _ref$filterState === void 0 ? false : _ref$filterState,
      _ref$filters = _ref.filters,
      filters = _ref$filters === void 0 ? [] : _ref$filters,
      _ref$filterOrig = _ref.filterOrig,
      filterOrig = _ref$filterOrig === void 0 ? [] : _ref$filterOrig,
      _ref$dateRange = _ref.dateRange,
      dateRange = _ref$dateRange === void 0 ? null : _ref$dateRange,
      _ref$datePicker = _ref.datePicker,
      datePicker = _ref$datePicker === void 0 ? null : _ref$datePicker;
  var SET_DATA = "".concat(key, "/SET_DATA");
  var CLEAR_DATA = "".concat(key, "/CLEAR_DATA");
  var SET_PAGE_SIZE = "".concat(key, "/SET_PAGE_SIZE");
  var SET_PAGE_NO = "".concat(key, "/SET_PAGE_NO");
  var SET_SORT_COLUMN = "".concat(key, "/SET_SORT_COLUMN");
  var CLEAR_SORT_COLUMN = "".concat(key, "/CLEAR_SORT_COLUMN");
  var SET_COLUMN_FILTERS = "".concat(key, "/SET_COLUMN_FILTERS");
  var CLEAR_COLUMN_FILTERS = "".concat(key, "/CLEAR_COLUMN_FILTERS");
  var SET_TABLE_COUNT = "".concat(key, "/SET_TABLE_COUNT");
  var RESET_TABLE_SETTINGS = "".concat(key, "/RESET_TABLE_SETTINGS");
  var SET_FILTERS = "".concat(key, "/SET_FILTERS");
  var OPEN_FILTER = "".concat(key, "/OPEN_FILTER");
  var CLOSE_FILTER = "".concat(key, "/CLOSE_FILTER");
  var CLEAR_FILTER = "".concat(key, "/CLEAR_FILTER");
  var APPLY_FILTER = "".concat(key, "/APPLY_FILTER");
  var CLEAR_ALL_SETTINGS = "".concat(key, "/CLEAR_ALL_SETTINGS");
  var SET_DATE_RANGE = "".concat(key, "/SET_DATE_RANGE");
  var CLEAR_DATE_RANGE = "".concat(key, "/CLEAR_DATE_RANGE");
  var SET_DATE_PICKER = "".concat(key, "/SET_DATE_PICKER");
  var CLEAR_DATE_PICKER = "".concat(key, "/CLEAR_DATE_PICKER");
  var tablesOptionsInitialState = {
    data: data,
    pageSize: pageSize,
    pageSizeList: pageSizeList,
    pageNo: pageNo,
    sortColumn: sortColumn,
    columnFilters: columnFilters,
    tableCount: tableCount,
    filterState: filterState,
    filters: filters,
    filterOrig: filterOrig,
    dateRange: dateRange,
    datePicker: datePicker
  };

  var tableOptionsReducer = function tableOptionsReducer() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : tablesOptionsInitialState;
    var action = arguments.length > 1 ? arguments[1] : undefined;

    switch (action.type) {
      case SET_DATA:
        return _objectSpread({}, state, {
          data: action.data
        });

      case CLEAR_DATA:
        return _objectSpread({}, state, {
          data: tablesOptionsInitialState.data
        });

      case SET_PAGE_SIZE:
        return _objectSpread({}, state, {
          pageSize: action.pageSize
        });

      case SET_PAGE_NO:
        return _objectSpread({}, state, {
          pageNo: action.pageNo
        });

      case SET_SORT_COLUMN:
        return _objectSpread({}, state, {
          sortColumn: sortColumn
        });

      case CLEAR_SORT_COLUMN:
        return _objectSpread({}, state, {
          sortColumn: tablesOptionsInitialState.sortColumn
        });

      case SET_COLUMN_FILTERS:
        return _objectSpread({}, state, {
          columnFilters: action.columnFilters
        });

      case CLEAR_COLUMN_FILTERS:
        return _objectSpread({}, state, {
          columnFilters: tablesOptionsInitialState.columnFilters
        });

      case SET_TABLE_COUNT:
        return _objectSpread({}, state, {
          tableCount: action.tableCount
        });

      case RESET_TABLE_SETTINGS:
        return _objectSpread({}, state, {
          pageSize: tablesOptionsInitialState.pageSize,
          pageNo: tablesOptionsInitialState.pageNo,
          sortColumn: tablesOptionsInitialState.sortColumn,
          columnFilters: tablesOptionsInitialState.columnFilters,
          tableCount: tablesOptionsInitialState.tableCount
        });

      case SET_FILTERS:
        return _objectSpread({}, state, {
          filters: action.filters
        });

      case OPEN_FILTER:
        return _objectSpread({}, state, {
          filterState: true,
          filterOrig: state.filters
        });

      case CLOSE_FILTER:
        return _objectSpread({}, state, {
          filterState: false,
          filters: state.filterOrig
        });

      case CLEAR_FILTER:
        return _objectSpread({}, state, {
          pageNo: tablesOptionsInitialState.pageNo,
          filterState: tablesOptionsInitialState.filterState,
          filters: tablesOptionsInitialState.filters
        });

      case APPLY_FILTER:
        return _objectSpread({}, state, {
          pageNo: tablesOptionsInitialState.pageNo,
          filterState: false,
          filterOrig: state.filters
        });

      case SET_DATE_RANGE:
        return _objectSpread({}, state, {
          pageNo: tablesOptionsInitialState.pageNo,
          dateRange: {
            startDate: action.startDate,
            endDate: action.endDate
          }
        });

      case CLEAR_DATE_RANGE:
        return _objectSpread({}, state, {
          pageNo: tablesOptionsInitialState.pageNo,
          dateRange: {
            startDate: null,
            endDate: null
          }
        });

      case SET_DATE_PICKER:
        return _objectSpread({}, state, {
          pageNo: tablesOptionsInitialState.pageNo,
          datePicker: action.date
        });

      case CLEAR_DATE_PICKER:
        return _objectSpread({}, state, {
          pageNo: tablesOptionsInitialState.pageNo,
          datePicker: null
        });

      case CLEAR_ALL_SETTINGS:
        return tablesOptionsInitialState;

      default:
        return state;
    }
  };

  var setData = function setData(_ref2) {
    var data = _ref2.data;
    return {
      type: SET_DATA,
      data: data
    };
  };

  var clearData = function clearData() {
    return {
      type: CLEAR_DATA
    };
  };

  var setPageSize = function setPageSize(_ref3) {
    var pageSize = _ref3.pageSize;
    return {
      type: SET_PAGE_SIZE,
      pageSize: pageSize
    };
  };

  var setPageNo = function setPageNo(_ref4) {
    var pageNo = _ref4.pageNo;
    return {
      type: SET_PAGE_NO,
      pageNo: pageNo
    };
  };

  var setSortColumn = function setSortColumn(_ref5) {
    var col = _ref5.col,
        dir = _ref5.dir;
    return {
      type: SET_SORT_COLUMN,
      SET_SORT_COLUMN: "".concat(col, " ").concat(dir)
    };
  };

  var setTableCount = function setTableCount(_ref6) {
    var tableCount = _ref6.tableCount;
    return {
      type: SET_TABLE_COUNT,
      tableCount: tableCount
    };
  };

  var setColumnFilters = function setColumnFilters(_ref7) {
    var date = _ref7.date;
    return {
      type: SET_COLUMN_FILTERS,
      date: date
    };
  };

  var clearColumnFilters = function clearColumnFilters() {
    return {
      type: CLEAR_COLUMN_FILTERS
    };
  };

  var resetTableSettings = function resetTableSettings() {
    return {
      type: RESET_TABLE_SETTINGS
    };
  };

  var setFilters = function setFilters(_ref8) {
    var filters = _ref8.filters;
    return {
      type: SET_FILTERS,
      filters: filters
    };
  };

  var openFilter = function openFilter() {
    return {
      type: OPEN_FILTER
    };
  };

  var closeFilter = function closeFilter() {
    return {
      type: CLOSE_FILTER
    };
  };

  var clearFilter = function clearFilter() {
    return {
      type: CLEAR_FILTER
    };
  };

  var applyFilter = function applyFilter() {
    return {
      type: APPLY_FILTER
    };
  };

  var clearAllSettings = function clearAllSettings() {
    return {
      type: CLEAR_ALL_SETTINGS
    };
  };

  var setDateRange = function setDateRange(_ref9) {
    var startDate = _ref9.startDate,
        endDate = _ref9.endDate;
    return {
      type: SET_DATE_RANGE,
      startDate: startDate,
      endDate: endDate
    };
  };

  var clearDateRange = function clearDateRange() {
    return {
      type: CLEAR_DATE_RANGE
    };
  };

  var setDatePicker = function setDatePicker(_ref10) {
    var date = _ref10.date;
    return {
      type: SET_DATE_PICKER,
      date: date
    };
  };

  var clearDatePicker = function clearDatePicker() {
    return {
      type: CLEAR_DATE_PICKER
    };
  };

  return {
    tableOptionsReducer: tableOptionsReducer,
    setData: setData,
    clearData: clearData,
    setPageSize: setPageSize,
    setPageNo: setPageNo,
    setSortColumn: setSortColumn,
    setColumnFilters: setColumnFilters,
    clearColumnFilters: clearColumnFilters,
    setTableCount: setTableCount,
    resetTableSettings: resetTableSettings,
    setFilters: setFilters,
    openFilter: openFilter,
    closeFilter: closeFilter,
    clearFilter: clearFilter,
    applyFilter: applyFilter,
    clearAllSettings: clearAllSettings,
    setDateRange: setDateRange,
    clearDateRange: clearDateRange,
    setDatePicker: setDatePicker,
    clearDatePicker: clearDatePicker
  };
};

var _default = tableReducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWR1Y2Vycy90YWJsZUZpbHRlclJlZHVjZXIudHMiXSwibmFtZXMiOlsidGFibGVSZWR1Y2VyIiwia2V5IiwiZGF0YSIsInBhZ2VTaXplIiwicGFnZVNpemVMaXN0IiwicGFnZU5vIiwic29ydENvbHVtbiIsImNvbHVtbkZpbHRlcnMiLCJ0YWJsZUNvdW50IiwiZmlsdGVyU3RhdGUiLCJmaWx0ZXJzIiwiZmlsdGVyT3JpZyIsImRhdGVSYW5nZSIsImRhdGVQaWNrZXIiLCJTRVRfREFUQSIsIkNMRUFSX0RBVEEiLCJTRVRfUEFHRV9TSVpFIiwiU0VUX1BBR0VfTk8iLCJTRVRfU09SVF9DT0xVTU4iLCJDTEVBUl9TT1JUX0NPTFVNTiIsIlNFVF9DT0xVTU5fRklMVEVSUyIsIkNMRUFSX0NPTFVNTl9GSUxURVJTIiwiU0VUX1RBQkxFX0NPVU5UIiwiUkVTRVRfVEFCTEVfU0VUVElOR1MiLCJTRVRfRklMVEVSUyIsIk9QRU5fRklMVEVSIiwiQ0xPU0VfRklMVEVSIiwiQ0xFQVJfRklMVEVSIiwiQVBQTFlfRklMVEVSIiwiQ0xFQVJfQUxMX1NFVFRJTkdTIiwiU0VUX0RBVEVfUkFOR0UiLCJDTEVBUl9EQVRFX1JBTkdFIiwiU0VUX0RBVEVfUElDS0VSIiwiQ0xFQVJfREFURV9QSUNLRVIiLCJ0YWJsZXNPcHRpb25zSW5pdGlhbFN0YXRlIiwidGFibGVPcHRpb25zUmVkdWNlciIsInN0YXRlIiwiYWN0aW9uIiwidHlwZSIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJkYXRlIiwic2V0RGF0YSIsImNsZWFyRGF0YSIsInNldFBhZ2VTaXplIiwic2V0UGFnZU5vIiwic2V0U29ydENvbHVtbiIsImNvbCIsImRpciIsInNldFRhYmxlQ291bnQiLCJzZXRDb2x1bW5GaWx0ZXJzIiwiY2xlYXJDb2x1bW5GaWx0ZXJzIiwicmVzZXRUYWJsZVNldHRpbmdzIiwic2V0RmlsdGVycyIsIm9wZW5GaWx0ZXIiLCJjbG9zZUZpbHRlciIsImNsZWFyRmlsdGVyIiwiYXBwbHlGaWx0ZXIiLCJjbGVhckFsbFNldHRpbmdzIiwic2V0RGF0ZVJhbmdlIiwiY2xlYXJEYXRlUmFuZ2UiLCJzZXREYXRlUGlja2VyIiwiY2xlYXJEYXRlUGlja2VyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUVBLElBQU1BLFlBQVksR0FBRyxTQUFmQSxZQUFlLE9BNEJmO0FBQUEsTUEzQkpDLEdBMkJJLFFBM0JKQSxHQTJCSTtBQUFBLHVCQTFCSkMsSUEwQkk7QUFBQSxNQTFCSkEsSUEwQkksMEJBMUJHLEVBMEJIO0FBQUEsMkJBekJKQyxRQXlCSTtBQUFBLE1BekJKQSxRQXlCSSw4QkF6Qk8sRUF5QlA7QUFBQSwrQkF4QkpDLFlBd0JJO0FBQUEsTUF4QkpBLFlBd0JJLGtDQXhCVyxDQUFDLEVBQUQsRUFBSyxHQUFMLEVBQVUsR0FBVixDQXdCWDtBQUFBLHlCQXZCSkMsTUF1Qkk7QUFBQSxNQXZCSkEsTUF1QkksNEJBdkJLLENBdUJMO0FBQUEsNkJBdEJKQyxVQXNCSTtBQUFBLE1BdEJKQSxVQXNCSSxnQ0F0QlMsSUFzQlQ7QUFBQSxnQ0FyQkpDLGFBcUJJO0FBQUEsTUFyQkpBLGFBcUJJLG1DQXJCWSxFQXFCWjtBQUFBLDZCQXBCSkMsVUFvQkk7QUFBQSxNQXBCSkEsVUFvQkksZ0NBcEJTLENBb0JUO0FBQUEsOEJBbkJKQyxXQW1CSTtBQUFBLE1BbkJKQSxXQW1CSSxpQ0FuQlUsS0FtQlY7QUFBQSwwQkFsQkpDLE9Ba0JJO0FBQUEsTUFsQkpBLE9Ba0JJLDZCQWxCTSxFQWtCTjtBQUFBLDZCQWpCSkMsVUFpQkk7QUFBQSxNQWpCSkEsVUFpQkksZ0NBakJTLEVBaUJUO0FBQUEsNEJBaEJKQyxTQWdCSTtBQUFBLE1BaEJKQSxTQWdCSSwrQkFoQlEsSUFnQlI7QUFBQSw2QkFmSkMsVUFlSTtBQUFBLE1BZkpBLFVBZUksZ0NBZlMsSUFlVDtBQUNKLE1BQU1DLFFBQVEsYUFBTWIsR0FBTixjQUFkO0FBQ0EsTUFBTWMsVUFBVSxhQUFNZCxHQUFOLGdCQUFoQjtBQUNBLE1BQU1lLGFBQWEsYUFB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QUFtQkxDLElBQUFBLGFBQWEsRUFBYkEsYUFuQks7QUFvQkxDLElBQUFBLGVBQWUsRUFBZkE7QUFwQkssR0FBUDtBQXNCRCxDQTFSRDs7ZUE0UmU5RCxZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9tZW50IH0gZnJvbSBcIm1vbWVudFwiO1xyXG5cclxuY29uc3QgdGFibGVSZWR1Y2VyID0gKHtcclxuICBrZXksXHJcbiAgZGF0YSA9IFtdLFxyXG4gIHBhZ2VTaXplID0gNTAsXHJcbiAgcGFnZVNpemVMaXN0ID0gWzUwLCAxMDAsIDI1MF0sXHJcbiAgcGFnZU5vID0gMSxcclxuICBzb3J0Q29sdW1uID0gbnVsbCxcclxuICBjb2x1bW5GaWx0ZXJzID0gW10sXHJcbiAgdGFibGVDb3VudCA9IDAsXHJcbiAgZmlsdGVyU3RhdGUgPSBmYWxzZSxcclxuICBmaWx0ZXJzID0gW10sXHJcbiAgZmlsdGVyT3JpZyA9IFtdLFxyXG4gIGRhdGVSYW5nZSA9IG51bGwsXHJcbiAgZGF0ZVBpY2tlciA9IG51bGxcclxufToge1xyXG4gIGtleTogc3RyaW5nO1xyXG4gIGRhdGE/OiBhbnk7XHJcbiAgcGFnZVNpemU/OiBudW1iZXI7XHJcbiAgcGFnZVNpemVMaXN0PzogYW55W107XHJcbiAgcGFnZU5vPzogbnVtYmVyO1xyXG4gIHNvcnRDb2x1bW4/OiBzdHJpbmcgfCBudWxsO1xyXG4gIGNvbHVtbkZpbHRlcnM/OiBhbnlbXTtcclxuICB0YWJsZUNvdW50PzogbnVtYmVyO1xyXG4gIGZpbHRlclN0YXRlPzogYm9vbGVhbjtcclxuICBmaWx0ZXJzPzoge307XHJcbiAgZmlsdGVyT3JpZz86IGFueVtdO1xyXG4gIGRhdGVSYW5nZT86IHsgc3RhcnREYXRlOiBNb21lbnQgfCBudWxsOyBlbmREYXRlOiBNb21lbnQgfCBudWxsIH0gfCBudWxsO1xyXG4gIGRhdGVQaWNrZXI/OiBNb21lbnQgfCBudWxsO1xyXG59KSA9PiB7XHJcbiAgY29uc3QgU0VUX0RBVEEgPSBgJHtrZXl9L1NFVF9EQVRBYDtcclxuICBjb25zdCBDTEVBUl9EQVRBID0gYCR7a2V5fS9DTEVBUl9EQVRBYDtcclxuICBjb25zdCBTRVRfUEFHRV9TSVpFID0gYCR7a2V5fS9TRVRfUEFHRV9TSVpFYDtcclxuICBjb25zdCBTRVRfUEFHRV9OTyA9IGAke2tleX0vU0VUX1BBR0VfTk9gO1xyXG4gIGNvbnN0IFNFVF9TT1JUX0NPTFVNTiA9IGAke2tleX0vU0VUX1NPUlRfQ09MVU1OYDtcclxuICBjb25zdCBDTEVBUl9TT1JUX0NPTFVNTiA9IGAke2tleX0vQ0xFQVJfU09SVF9DT0xVTU5gO1xyXG4gIGNvbnN0IFNFVF9DT0xVTU5fRklMVEVSUyA9IGAke2tleX0vU0VUX0NPTFVNTl9GSUxURVJTYDtcclxuICBjb25zdCBDTEVBUl9DT0xVTU5fRklMVEVSUyA9IGAke2tleX0vQ0xFQVJfQ09MVU1OX0ZJTFRFUlNgO1xyXG4gIGNvbnN0IFNFVF9UQUJMRV9DT1VOVCA9IGAke2tleX0vU0VUX1RBQkxFX0NPVU5UYDtcclxuICBjb25zdCBSRVNFVF9UQUJMRV9TRVRUSU5HUyA9IGAke2tleX0vUkVTRVRfVEFCTEVfU0VUVElOR1NgO1xyXG4gIGNvbnN0IFNFVF9GSUxURVJTID0gYCR7a2V5fS9TRVRfRklMVEVSU2A7XHJcbiAgY29uc3QgT1BFTl9GSUxURVIgPSBgJHtrZXl9L09QRU5fRklMVEVSYDtcclxuICBjb25zdCBDTE9TRV9GSUxURVIgPSBgJHtrZXl9L0NMT1NFX0ZJTFRFUmA7XHJcbiAgY29uc3QgQ0xFQVJfRklMVEVSID0gYCR7a2V5fS9DTEVBUl9GSUxURVJgO1xyXG4gIGNvbnN0IEFQUExZX0ZJTFRFUiA9IGAke2tleX0vQVBQTFlfRklMVEVSYDtcclxuICBjb25zdCBDTEVBUl9BTExfU0VUVElOR1MgPSBgJHtrZXl9L0NMRUFSX0FMTF9TRVRUSU5HU2A7XHJcbiAgY29uc3QgU0VUX0RBVEVfUkFOR0UgPSBgJHtrZXl9L1NFVF9EQVRFX1JBTkdFYDtcclxuICBjb25zdCBDTEVBUl9EQVRFX1JBTkdFID0gYCR7a2V5fS9DTEVBUl9EQVRFX1JBTkdFYDtcclxuICBjb25zdCBTRVRfREFURV9QSUNLRVIgPSBgJHtrZXl9L1NFVF9EQVRFX1BJQ0tFUmA7XHJcbiAgY29uc3QgQ0xFQVJfREFURV9QSUNLRVIgPSBgJHtrZXl9L0NMRUFSX0RBVEVfUElDS0VSYDtcclxuXHJcbiAgY29uc3QgdGFibGVzT3B0aW9uc0luaXRpYWxTdGF0ZSA9IHtcclxuICAgIGRhdGEsXHJcbiAgICBwYWdlU2l6ZSxcclxuICAgIHBhZ2VTaXplTGlzdCxcclxuICAgIHBhZ2VObyxcclxuICAgIHNvcnRDb2x1bW4sXHJcbiAgICBjb2x1bW5GaWx0ZXJzLFxyXG4gICAgdGFibGVDb3VudCxcclxuICAgIGZpbHRlclN0YXRlLFxyXG4gICAgZmlsdGVycyxcclxuICAgIGZpbHRlck9yaWcsXHJcbiAgICBkYXRlUmFuZ2UsXHJcbiAgICBkYXRlUGlja2VyXHJcbiAgfTtcclxuXHJcbiAgY29uc3QgdGFibGVPcHRpb25zUmVkdWNlciA9IChcclxuICAgIHN0YXRlID0gdGFibGVzT3B0aW9uc0luaXRpYWxTdGF0ZSxcclxuICAgIGFjdGlvbjogYW55XHJcbiAgKSA9PiB7XHJcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICAgIGNhc2UgU0VUX0RBVEE6XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgICAgZGF0YTogYWN0aW9uLmRhdGFcclxuICAgICAgICB9O1xyXG4gICAgICBjYXNlIENMRUFSX0RBVEE6XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgICAgZGF0YTogdGFibGVzT3B0aW9uc0luaXRpYWxTdGF0ZS5kYXRhXHJcbiAgICAgICAgfTtcclxuICAgICAgY2FzZSBTRVRfUEFHRV9TSVpFOlxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgIHBhZ2VTaXplOiBhY3Rpb24ucGFnZVNpemVcclxuICAgICAgICB9O1xyXG4gICAgICBjYXNlIFNFVF9QQUdFX05POlxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgIHBhZ2VObzogYWN0aW9uLnBhZ2VOb1xyXG4gICAgICAgIH07XHJcbiAgICAgIGNhc2UgU0VUX1NPUlRfQ09MVU1OOlxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgIHNvcnRDb2x1bW5cclxuICAgICAgICB9O1xyXG4gICAgICBjYXNlIENMRUFSX1NPUlRfQ09MVU1OOlxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgIHNvcnRDb2x1bW46IHRhYmxlc09wdGlvbnNJbml0aWFsU3RhdGUuc29ydENvbHVtblxyXG4gICAgICAgIH07XHJcbiAgICAgIGNhc2UgU0VUX0NPTFVNTl9GSUxURVJTOlxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgIGNvbHVtbkZpbHRlcnM6IGFjdGlvbi5jb2x1bW5GaWx0ZXJzXHJcbiAgICAgICAgfTtcclxuICAgICAgY2FzZSBDTEVBUl9DT0xVTU5fRklMVEVSUzpcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgICBjb2x1bW5GaWx0ZXJzOiB0YWJsZXNPcHRpb25zSW5pdGlhbFN0YXRlLmNvbHVtbkZpbHRlcnNcclxuICAgICAgICB9O1xyXG4gICAgICBjYXNlIFNFVF9UQUJMRV9DT1VOVDpcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgICB0YWJsZUNvdW50OiBhY3Rpb24udGFibGVDb3VudFxyXG4gICAgICAgIH07XHJcbiAgICAgIGNhc2UgUkVTRVRfVEFCTEVfU0VUVElOR1M6XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgICAgcGFnZVNpemU6IHRhYmxlc09wdGlvbnNJbml0aWFsU3RhdGUucGFnZVNpemUsXHJcbiAgICAgICAgICBwYWdlTm86IHRhYmxlc09wdGlvbnNJbml0aWFsU3RhdGUucGFnZU5vLFxyXG4gICAgICAgICAgc29ydENvbHVtbjogdGFibGVzT3B0aW9uc0luaXRpYWxTdGF0ZS5zb3J0Q29sdW1uLFxyXG4gICAgICAgICAgY29sdW1uRmlsdGVyczogdGFibGVzT3B0aW9uc0luaXRpYWxTdGF0ZS5jb2x1bW5GaWx0ZXJzLFxyXG4gICAgICAgICAgdGFibGVDb3VudDogdGFibGVzT3B0aW9uc0luaXRpYWxTdGF0ZS50YWJsZUNvdW50XHJcbiAgICAgICAgfTtcclxuICAgICAgY2FzZSBTRVRfRklMVEVSUzpcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgICBmaWx0ZXJzOiBhY3Rpb24uZmlsdGVyc1xyXG4gICAgICAgIH07XHJcbiAgICAgIGNhc2UgT1BFTl9GSUxURVI6XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgICAgZmlsdGVyU3RhdGU6IHRydWUsXHJcbiAgICAgICAgICBmaWx0ZXJPcmlnOiBzdGF0ZS5maWx0ZXJzXHJcbiAgICAgICAgfTtcclxuICAgICAgY2FzZSBDTE9TRV9GSUxURVI6XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgICAgZmlsdGVyU3RhdGU6IGZhbHNlLFxyXG4gICAgICAgICAgZmlsdGVyczogc3RhdGUuZmlsdGVyT3JpZ1xyXG4gICAgICAgIH07XHJcbiAgICAgIGNhc2UgQ0xFQVJfRklMVEVSOlxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgIHBhZ2VObzogdGFibGVzT3B0aW9uc0luaXRpYWxTdGF0ZS5wYWdlTm8sXHJcbiAgICAgICAgICBmaWx0ZXJTdGF0ZTogdGFibGVzT3B0aW9uc0luaXRpYWxTdGF0ZS5maWx0ZXJTdGF0ZSxcclxuICAgICAgICAgIGZpbHRlcnM6IHRhYmxlc09wdGlvbnNJbml0aWFsU3RhdGUuZmlsdGVyc1xyXG4gICAgICAgIH07XHJcbiAgICAgIGNhc2UgQVBQTFlfRklMVEVSOlxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgIHBhZ2VObzogdGFibGVzT3B0aW9uc0luaXRpYWxTdGF0ZS5wYWdlTm8sXHJcbiAgICAgICAgICBmaWx0ZXJTdGF0ZTogZmFsc2UsXHJcbiAgICAgICAgICBmaWx0ZXJPcmlnOiBzdGF0ZS5maWx0ZXJzXHJcbiAgICAgICAgfTtcclxuICAgICAgY2FzZSBTRVRfREFURV9SQU5HRTpcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgICBwYWdlTm86IHRhYmxlc09wdGlvbnNJbml0aWFsU3RhdGUucGFnZU5vLFxyXG4gICAgICAgICAgZGF0ZVJhbmdlOiB7IHN0YXJ0RGF0ZTogYWN0aW9uLnN0YXJ0RGF0ZSwgZW5kRGF0ZTogYWN0aW9uLmVuZERhdGUgfVxyXG4gICAgICAgIH07XHJcbiAgICAgIGNhc2UgQ0xFQVJfREFURV9SQU5HRTpcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgICBwYWdlTm86IHRhYmxlc09wdGlvbnNJbml0aWFsU3RhdGUucGFnZU5vLFxyXG4gICAgICAgICAgZGF0ZVJhbmdlOiB7IHN0YXJ0RGF0ZTogbnVsbCwgZW5kRGF0ZTogbnVsbCB9XHJcbiAgICAgICAgfTtcclxuICAgICAgY2FzZSBTRVRfREFURV9QSUNLRVI6XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgICAgcGFnZU5vOiB0YWJsZXNPcHRpb25zSW5pdGlhbFN0YXRlLnBhZ2VObyxcclxuICAgICAgICAgIGRhdGVQaWNrZXI6IGFjdGlvbi5kYXRlXHJcbiAgICAgICAgfTtcclxuICAgICAgY2FzZSBDTEVBUl9EQVRFX1BJQ0tFUjpcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgICBwYWdlTm86IHRhYmxlc09wdGlvbnNJbml0aWFsU3RhdGUucGFnZU5vLFxyXG4gICAgICAgICAgZGF0ZVBpY2tlcjogbnVsbFxyXG4gICAgICAgIH07XHJcbiAgICAgIGNhc2UgQ0xFQVJfQUxMX1NFVFRJTkdTOlxyXG4gICAgICAgIHJldHVybiB0YWJsZXNPcHRpb25zSW5pdGlhbFN0YXRlO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCBzZXREYXRhID0gKHsgZGF0YSB9OiB7IGRhdGE6IGFueSB9KSA9PiAoe1xyXG4gICAgdHlwZTogU0VUX0RBVEEsXHJcbiAgICBkYXRhXHJcbiAgfSk7XHJcbiAgY29uc3QgY2xlYXJEYXRhID0gKCkgPT4gKHtcclxuICAgIHR5cGU6IENMRUFSX0RBVEFcclxuICB9KTtcclxuICBjb25zdCBzZXRQYWdlU2l6ZSA9ICh7IHBhZ2VTaXplIH06IHsgcGFnZVNpemU6IG51bWJlciB9KSA9PiAoe1xyXG4gICAgdHlwZTogU0VUX1BBR0VfU0laRSxcclxuICAgIHBhZ2VTaXplXHJcbiAgfSk7XHJcbiAgY29uc3Qgc2V0UGFnZU5vID0gKHsgcGFnZU5vIH06IHsgcGFnZU5vOiBudW1iZXIgfSkgPT4gKHtcclxuICAgIHR5cGU6IFNFVF9QQUdFX05PLFxyXG4gICAgcGFnZU5vXHJcbiAgfSk7XHJcbiAgY29uc3Qgc2V0U29ydENvbHVtbiA9ICh7IGNvbCwgZGlyIH06IHsgY29sOiBzdHJpbmc7IGRpcjogc3RyaW5nIH0pID0+ICh7XHJcbiAgICB0eXBlOiBTRVRfU09SVF9DT0xVTU4sXHJcbiAgICBTRVRfU09SVF9DT0xVTU46IGAke2NvbH0gJHtkaXJ9YFxyXG4gIH0pO1xyXG4gIGNvbnN0IHNldFRhYmxlQ291bnQgPSAoeyB0YWJsZUNvdW50IH06IHsgdGFibGVDb3VudDogbnVtYmVyIH0pID0+ICh7XHJcbiAgICB0eXBlOiBTRVRfVEFCTEVfQ09VTlQsXHJcbiAgICB0YWJsZUNvdW50XHJcbiAgfSk7XHJcbiAgY29uc3Qgc2V0Q29sdW1uRmlsdGVycyA9ICh7IGRhdGUgfTogeyBkYXRlOiBNb21lbnQgfCBudWxsIH0pID0+ICh7XHJcbiAgICB0eXBlOiBTRVRfQ09MVU1OX0ZJTFRFUlMsXHJcbiAgICBkYXRlXHJcbiAgfSk7XHJcbiAgY29uc3QgY2xlYXJDb2x1bW5GaWx0ZXJzID0gKCkgPT4gKHtcclxuICAgIHR5cGU6IENMRUFSX0NPTFVNTl9GSUxURVJTXHJcbiAgfSk7XHJcbiAgY29uc3QgcmVzZXRUYWJsZVNldHRpbmdzID0gKCkgPT4gKHtcclxuICAgIHR5cGU6IFJFU0VUX1RBQkxFX1NFVFRJTkdTXHJcbiAgfSk7XHJcbiAgY29uc3Qgc2V0RmlsdGVycyA9ICh7IGZpbHRlcnMgfTogeyBmaWx0ZXJzOiBhbnkgfSkgPT4gKHtcclxuICAgIHR5cGU6IFNFVF9GSUxURVJTLFxyXG4gICAgZmlsdGVyc1xyXG4gIH0pO1xyXG4gIGNvbnN0IG9wZW5GaWx0ZXIgPSAoKSA9PiAoe1xyXG4gICAgdHlwZTogT1BFTl9GSUxURVJcclxuICB9KTtcclxuICBjb25zdCBjbG9zZUZpbHRlciA9ICgpID0+ICh7XHJcbiAgICB0eXBlOiBDTE9TRV9GSUxURVJcclxuICB9KTtcclxuICBjb25zdCBjbGVhckZpbHRlciA9ICgpID0+ICh7XHJcbiAgICB0eXBlOiBDTEVBUl9GSUxURVJcclxuICB9KTtcclxuICBjb25zdCBhcHBseUZpbHRlciA9ICgpID0+ICh7XHJcbiAgICB0eXBlOiBBUFBMWV9GSUxURVJcclxuICB9KTtcclxuICBjb25zdCBjbGVhckFsbFNldHRpbmdzID0gKCkgPT4gKHtcclxuICAgIHR5cGU6IENMRUFSX0FMTF9TRVRUSU5HU1xyXG4gIH0pO1xyXG4gIGNvbnN0IHNldERhdGVSYW5nZSA9ICh7XHJcbiAgICBzdGFydERhdGUsXHJcbiAgICBlbmREYXRlXHJcbiAgfToge1xyXG4gICAgc3RhcnREYXRlOiBNb21lbnQgfCBudWxsO1xyXG4gICAgZW5kRGF0ZTogTW9tZW50IHwgbnVsbDtcclxuICB9KSA9PiAoe1xyXG4gICAgdHlwZTogU0VUX0RBVEVfUkFOR0UsXHJcbiAgICBzdGFydERhdGUsXHJcbiAgICBlbmREYXRlXHJcbiAgfSk7XHJcbiAgY29uc3QgY2xlYXJEYXRlUmFuZ2UgPSAoKSA9PiAoe1xyXG4gICAgdHlwZTogQ0xFQVJfREFURV9SQU5HRVxyXG4gIH0pO1xyXG4gIGNvbnN0IHNldERhdGVQaWNrZXIgPSAoeyBkYXRlIH06IHsgZGF0ZTogTW9tZW50IHwgbnVsbCB9KSA9PiAoe1xyXG4gICAgdHlwZTogU0VUX0RBVEVfUElDS0VSLFxyXG4gICAgZGF0ZVxyXG4gIH0pO1xyXG4gIGNvbnN0IGNsZWFyRGF0ZVBpY2tlciA9ICgpID0+ICh7XHJcbiAgICB0eXBlOiBDTEVBUl9EQVRFX1BJQ0tFUlxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgdGFibGVPcHRpb25zUmVkdWNlcixcclxuICAgIHNldERhdGEsXHJcbiAgICBjbGVhckRhdGEsXHJcbiAgICBzZXRQYWdlU2l6ZSxcclxuICAgIHNldFBhZ2VObyxcclxuICAgIHNldFNvcnRDb2x1bW4sXHJcbiAgICBzZXRDb2x1bW5GaWx0ZXJzLFxyXG4gICAgY2xlYXJDb2x1bW5GaWx0ZXJzLFxyXG4gICAgc2V0VGFibGVDb3VudCxcclxuICAgIHJlc2V0VGFibGVTZXR0aW5ncyxcclxuICAgIHNldEZpbHRlcnMsXHJcbiAgICBvcGVuRmlsdGVyLFxyXG4gICAgY2xvc2VGaWx0ZXIsXHJcbiAgICBjbGVhckZpbHRlcixcclxuICAgIGFwcGx5RmlsdGVyLFxyXG4gICAgY2xlYXJBbGxTZXR0aW5ncyxcclxuICAgIHNldERhdGVSYW5nZSxcclxuICAgIGNsZWFyRGF0ZVJhbmdlLFxyXG4gICAgc2V0RGF0ZVBpY2tlcixcclxuICAgIGNsZWFyRGF0ZVBpY2tlclxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB0YWJsZVJlZHVjZXI7XHJcbiJdfQ==